git add .; git commit; git push origin hajar
/*

resp sTArT 
check method 
-> check file or folder
{
	if folder 
		{
			check permision 
			-> check default index
			-> check autoindex
		}
	if file
	{
		check permision 
		-> check cgi
	}
} 
-> check permision 
-> check index 
-> check autoindex
*/

//throw std::runtime_error(str_red("cgi error"));

// void setEnvironmentVariable(const std::string& key, const std::string& value) {
//     std::string envVar = key + "=" + value;
//     putenv(const_cast<char*>(envVar.c_str()));
// }

// void setupCGIEnvironment(const std::map<std::string, std::string>& requestMap) {
//     for (std::map<std::string, std::string>::const_iterator it = requestMap.begin(); it != requestMap.end(); ++it) {
//         std::string key = "HTTP_" + it->first;
//         std::string value = it->second;

//         setEnvironmentVariable(key, value);
//     }

//setenv():
// + name is a C-style string representing the name of the environment variable.
// +value is a C-style string representing the value to be assigned to 
// the environment variable.
// +overwrite is an integer flag indicating whether the environment variable
//  should be overwritten if it already exists. 
// A non-zero value indicates that it should be overwritten, 
// while a value of 0 means it should not be overwritten

// #include <iostream>
// #include <vector>
// #include <cstring>
// #include <cstdio>
// #include <dirent.h>

// class Delete
// {
// private:
//     MainClient *main_client;
//     std::vector<ConfigLocationParser *> config_location_parser;

// public:
//     Delete(MainClient *main_client, std::vector<ConfigLocationParser *> config_location_parser)
//     {
//         this->main_client = main_client;
//         this->config_location_parser = config_location_parser;
//     }

//     ~Delete(){}

//     void delete_file()
//     {
//         for (std::vector<ConfigLocationParser*>::const_iterator it = this->config_location_parser.begin();
//              it != this->config_location_parser.end(); it++) {
//             std::string file_name = this->main_client->get_request("Request-URI");

//             if ((*it)->get_location().find("cgi") != std::string::npos)
//                 continue;

//             if (this->main_client->get_request("Request-URI").find((*it)->get_location()) != std::string::npos) {
//                 std::cout << "++ location ++" << std::endl;
//                 file_name.erase(0, (*it)->get_location().length());
//                 file_name = (*it)->get_root() + file_name; // Concatenate root and remaining path segments
//                 remove_file(file_name);
//             } else if (this->main_client->get_request("Request-URI").find((*it)->get_root()) != std::string::npos) {
//                 std::cout << "++ in delete file root ++" << std::endl;
//                 file_name.erase(0, (*it)->get_root().length());
//                 file_name = (*it)->get_root() + file_name; // Concatenate root and remaining path segments
//                 remove_file(file_name);
//             }
//         }
//     }

// private:
//     void remove_file(const std::string &path)
//     {
//         DIR *dir = opendir(path.c_str());
//         if (dir != NULL)
//         {
//             // Directory exists, delete its contents recursively
//             struct dirent *entry;
//             while ((entry = readdir(dir)) != NULL)
//             {
//                 if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0)
//                     continue;

//                 std::string entry_path = path + "/" + entry->d_name;

//                 if (entry->d_type == DT_DIR)
//                 {
//                     remove_file(entry_path); // Recursively delete subdirectory
//                 }
//                 else if (entry->d_type == DT_REG)
//                 {
//                     if (remove(entry_path.c_str()) != 0)
//                         perror("Error deleting file");
//                     else
//                         std::cout << "File successfully deleted: " << entry_path << std::endl;
//                 }
//             }
//             closedir(dir);
//         }

//         if (remove(path.c_str()) != 0)
//             perror("Error deleting directory");
//         else
//             std::cout << "Directory successfully deleted: " << path << std::endl;
//     }
// };
